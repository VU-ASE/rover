name: Build and release all software

on:
    release:
        types: [published]
    pull_request:
      types: [opened, synchronize, reopened, edited]

permissions:
    contents: write
    packages: write

env:
    ROVERCTL_WEB_IMAGE_NAME: ghcr.io/vu-ase/roverctl-web

jobs:
    build-roverctl:
        #
        # This is a bit of a weird action, since we generate the OpenAPI files in a Docker container (devcontainer)
        # but the actual build is done in the github runner without Docker. This could be optimized a little by
        # creating a makefile target that generates cross-platform builds and then run everything in the Docker container
        #

        name: Build roverctl
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.22.12"

            - name: Set VERSION (tag or fallback)
              run: |
                if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
                  echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
                else
                  echo "VERSION=9.9.9" >> $GITHUB_ENV
                fi

              # Both devcontainer (devuser) and normal user need access
            - name: Fix permissions
              run: sudo chmod -R 777 ./roverctl ./spec

            - name: Generate OpenAPI Go files
              run: |
                  cd roverctl
                  docker build --build-arg HOST_UID=$(id -u) -t roverctl-build-container -f ../.devcontainer/roverctl/Dockerfile .
                  docker run --rm --user devuser  -v "$(pwd):/home/devuser/roverctl" -v "$(pwd)/../spec:/home/devuser/spec"  roverctl-build-container bash -ic 'cd /home/devuser/roverctl && make build-open-api'

            - name: Build binaries for linux and macos (amd64 and arm64)
              env:
                  VERSION: ${{ env.VERSION }}
              working-directory: roverctl/src
              run: |
                  BUILD_DIR=../bin/
                  BINARY_NAME=roverctl
                  LDFLAGS="-X 'github.com/VU-ASE/rover/roverctl/src/views/info.Version=${VERSION}'"
                  mkdir -p $BUILD_DIR

                  # Build for macOS Intel
                  GOOS=darwin GOARCH=amd64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-macos-amd64"

                  # Build for macOS Silicon
                  GOOS=darwin GOARCH=arm64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-macos-arm64"

                  # Build for Linux AMD64
                  GOOS=linux GOARCH=amd64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-linux-amd64"

                  # Build for Linux ARM64
                  GOOS=linux GOARCH=arm64 go build -buildvcs=false -ldflags="$LDFLAGS" -o "$BUILD_DIR${BINARY_NAME}-linux-arm64"

            - name: Save roverctl artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: roverctl-binaries
                  path: roverctl/bin/*

    build-rust-binaries:
        name: Build roverd and rover-local
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set VERSION (tag or fallback)
              run: |
                if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
                  echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
                else
                  echo "VERSION=9.9.9" >> $GITHUB_ENV
                fi

            # This action works a bit differently than for roverctl, it builds everything inside
            # the docker container in the exact same way that is done during development. The
            # devcontianer mounts the entire "rover" repo and then places VSCode inside of
            # "rover/roverd", this makes using git and having access to the spec dir easy.
            # This means that the build container should mount the entire "rover" repo and then
            # simply call the Makefile target into the rover/roverd directory.
            - name: Build and run in Docker container (this includes generating from openapi spec)
              env:
                  VERSION: ${{ env.VERSION }}
              run: |
                  docker build --build-arg HOST_UID=$(id -u) -t roverd-build-container -f .devcontainer/roverd/Dockerfile .
                  docker run -e VERSION=${VERSION} --rm --user dev -v "$(pwd):/home/dev/work:z" roverd-build-container bash -ic 'make build-arm -C /home/dev/work/roverd'
                  docker run -e VERSION=${VERSION} --rm --user dev -v "$(pwd):/home/dev/work:z" roverd-build-container bash -ic 'make build -C /home/dev/work/roverd'

            - name: Save roverd artifact (arm only)
              uses: actions/upload-artifact@v4
              with:
                  name: roverd-binary
                  path: "${{ github.workspace }}/roverd/target/aarch64-unknown-linux-gnu/release/roverd"
            
            - name: Save rover-local-arm64 artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rover-local-binary-arm64
                  path: "${{ github.workspace }}/roverd/target/aarch64-unknown-linux-gnu/release/rover-local"
            
            - name: Save rover-local-amd64 artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rover-local-binary-amd64
                  path: "${{ github.workspace }}/roverd/target/release/rover-local"

    build-roverctl-web:
        name: Build roverctl-web
        runs-on: ubuntu-latest
        strategy:
            matrix:
                arch: [amd64, arm64]
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set VERSION (tag or fallback)
              run: |
                if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
                  echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
                else
                  echo "VERSION=9.9.9" >> $GITHUB_ENV
                fi

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: all

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Docker Image (multi-arch)
              env:
                  VERSION: ${{ env.VERSION }}
              working-directory: roverctl-web
              run: |
                  ls
                  docker buildx build \
                    --platform linux/${{ matrix.arch }} \
                    --tag $ROVERCTL_WEB_IMAGE_NAME:${VERSION}-${{ matrix.arch }} \
                    --file Dockerfile \
                    --push .

    upload-release-assets:
        name: Upload release assets
        needs:
            - build-roverctl
            - build-rust-binaries
            - build-roverctl-web
        runs-on: ubuntu-latest
        
        # Only run this job when the workflow was triggered by a “release” event,not on pull_request.
        if: github.event_name == 'release'

        steps:
            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Download roverctl artifacts
              uses: actions/download-artifact@v4
              with:
                  name: roverctl-binaries
                  path: roverctl-bin/

            - name: Extract roverctl artifacts
              run: |
                  mkdir -p roverctl/bin
                  mv roverctl-bin/* roverctl/bin/
                  chmod +x roverctl/bin/*

            - name: Download roverd artifact
              uses: actions/download-artifact@v4
              with:
                  name: roverd-binary
                  path: roverd-bin/

            - name: Extract roverd artifact
              run: |
                  mkdir -p roverd/target/aarch64-unknown-linux-gnu/release/
                  mv roverd-bin/* roverd/target/aarch64-unknown-linux-gnu/release/
                  chmod +x roverd/target/aarch64-unknown-linux-gnu/release/roverd
            
            - name: Download rover-local-arm64 artifact
              uses: actions/download-artifact@v4
              with:
                  name: rover-local-binary-arm64
                  path: rover-local-arm64

            - name: Make executable rover-local-arm64 artifact
              run: |
                  chmod +x rover-local-arm64/*
            
            - name: Download rover-local-amd64 artifact
              uses: actions/download-artifact@v4
              with:
                  name: rover-local-binary-amd64
                  path: rover-local-amd64

            - name: Make executable rover-local-amd64 artifact
              run: |
                  chmod +x rover-local-amd64/*
            
            - name: Debug print
              run: |
                  ls -lah
                  file rover-local-amd64/*
                  file rover-local-arm64/*

            - name: Set VERSION from tag
              run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV

            # Upload rovrectl binaries and roverd
            - uses: AButler/upload-release-assets@v3.0
              with:
                  files: roverctl/bin/*;roverd/target/aarch64-unknown-linux-gnu/release/roverd
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  release-tag: ${{ env.VERSION }}

            # Merge and push all roverctl-web images
            - name: Create and Push Multi-Arch Manifest for roverctl-web
              run: |
                  docker buildx imagetools create \
                    --tag $ROVERCTL_WEB_IMAGE_NAME:${VERSION} \
                    --tag $ROVERCTL_WEB_IMAGE_NAME:latest \
                    $ROVERCTL_WEB_IMAGE_NAME:${VERSION}-amd64 \
                    $ROVERCTL_WEB_IMAGE_NAME:${VERSION}-arm64
